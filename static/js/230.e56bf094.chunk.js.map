{"version":3,"file":"static/js/230.e56bf094.chunk.js","mappings":"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","sources":["components/ContactsForm/ContactsForm.styled.jsx","components/ContactsForm/ContactsForm.jsx","components/ContactsList/ContactsList.styled.jsx","components/ContactPerson/ContactPerson.styled.jsx","components/ContactPerson/ContactPerson.jsx","redux/Contacts/selectors.js","components/ContactsList/ContactsList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Form, Field, ErrorMessage } from 'formik';\n\nexport const FormStyled = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  border: 2px solid;\n  padding: 20px;\n  width: 30%;\n  gap: 30px;\n  margin-top: 20px;\n  margin-bottom: 20px;\n`;\n\nexport const Input = styled(Field)`\n  margin-top: 10px;\n  width: 90%;\n  background-color: antiquewhite;\n`;\nexport const Error = styled(ErrorMessage)``;\n\nexport const AddButton = styled.button`\n  width: 150px;\n  background-color: #6262d8;\n  cursor: pointer;\n`;\n","import { useDispatch } from 'react-redux';\n\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport { nanoid } from 'nanoid';\n\nimport { AddButton, Error, FormStyled, Input } from './ContactsForm.styled';\nimport { addContact } from 'redux/Contacts/operations';\n\nconst schema = yup.object().shape({\n  name: yup.string().required(),\n  number: yup.string().min(6).max(16).required(),\n});\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const handleSubmit = (values, { resetForm }) => {\n    values.id = nanoid();\n    dispatch(addContact(values));\n    resetForm();\n  };\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      <FormStyled autoComplete=\"off\">\n        <label htmlFor=\"name\">\n          Name\n          <Input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          />\n          <Error name=\"name\" />\n        </label>\n        <label htmlFor=\"number\">\n          Telephone\n          <Input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          />\n          <Error name=\"number\" />\n        </label>\n        <AddButton type=\"submit\">Add contact</AddButton>\n      </FormStyled>\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\n\nexport const ListContacts = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n  width: fit-content;\n  margin-top: 20px;\n  padding: 20px;\n  border: dotted 1px;\n`;\n","import styled from 'styled-components';\n\nexport const PersonStyled = styled.li`\n  display: flex;\n  gap: 10px;\n`;\n\nexport const DeleteButton = styled.button`\n  width: fit-content;\n  background-color: #bb1414;\n  cursor: pointer;\n`;\n","import { useDispatch } from 'react-redux';\n\nimport PropTypes from 'prop-types';\nimport { DeleteButton, PersonStyled } from './ContactPerson.styled';\nimport { deleteContact } from 'redux/Contacts/operations';\n\nexport const ContactPerson = ({ name, number, id }) => {\n  const dispatch = useDispatch();\n  return (\n    <PersonStyled>\n      <span>\n        {name}: {number}\n      </span>\n      <DeleteButton\n        onClick={() => {\n          dispatch(deleteContact(id));\n        }}\n      >\n        Delete\n      </DeleteButton>\n    </PersonStyled>\n  );\n};\n\nContactPerson.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n};\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.contacts.items;\nexport const selectIsLoading = state => state.contacts.contacts.isLoading;\nexport const selectError = state => state.contacts.contacts.error;\nexport const selectFilter = state => state.filter.filter;\nexport const SelectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, statusFilter) => {\n    if (statusFilter) {\n      const normalizedFilter = statusFilter.toLowerCase();\n      return contacts.filter(item =>\n        item.name.toLowerCase().includes(normalizedFilter)\n      );\n    }\n    return contacts;\n  }\n);\n","import { useSelector } from 'react-redux';\nimport { ListContacts } from './ContactsList.styled';\nimport { ContactPerson } from 'components/ContactPerson/ContactPerson';\nimport { SelectVisibleContacts } from 'redux/Contacts/selectors';\n\nexport const ContactList = () => {\n  const list = useSelector(SelectVisibleContacts);\n\n  return (\n    <>\n      {list && (\n        <ListContacts>\n          {list.map(({ id, name, number }) => (\n            <ContactPerson key={id} id={id} name={name} number={number} />\n          ))}\n        </ListContacts>\n      )}\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nexport const FilterBlock = styled.div`\n  margin-top: 10px;\n  display: flex;\n  width: 20%;\n  flex-direction: column;\n  gap: 10px;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { setFilterValue } from 'redux/Contacts/filterSlice';\nimport { selectFilter } from 'redux/Contacts/selectors';\n\nimport { FilterBlock } from './Filter.styled';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  return (\n    <FilterBlock>\n      <p>Find contacts by name</p>\n      <input\n        type=\"text\"\n        value={filter}\n        onChange={e => dispatch(setFilterValue(e.target.value))}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n      />\n    </FilterBlock>\n  );\n};\n","import { ContactForm } from 'components/ContactsForm/ContactsForm';\nimport { ContactList } from 'components/ContactsList/ContactsList';\nimport { Filter } from 'components/Filter/Filter';\nimport { Helmet } from 'react-helmet';\n// import { useSelector } from 'react-redux';\n// import { SelectVisibleContacts } from 'redux/Contacts/selectors';\n\nconst Contacts = () => {\n  return (\n    <>\n      <Helmet>\n        <title>Your tasks</title>\n      </Helmet>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      {/* {isLoading && !error && <b>Request in progress...</b>} */}\n      <ContactList />\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["FormStyled","styled","Form","Input","Field","Error","ErrorMessage","AddButton","schema","yup","shape","name","required","number","min","max","initialValues","ContactForm","dispatch","useDispatch","validationSchema","onSubmit","values","resetForm","id","nanoid","addContact","autoComplete","htmlFor","type","pattern","title","ListContacts","PersonStyled","DeleteButton","ContactPerson","onClick","deleteContact","selectFilter","state","filter","SelectVisibleContacts","createSelector","contacts","items","statusFilter","normalizedFilter","toLowerCase","item","includes","ContactList","list","useSelector","map","FilterBlock","Filter","value","onChange","e","setFilterValue","target","Helmet"],"sourceRoot":""}